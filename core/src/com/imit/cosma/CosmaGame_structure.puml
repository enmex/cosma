@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.imit.cosma.CosmaGame",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_3236175 { 
   	label=imit
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_991371260 { 
   	label=cosma
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   AI1078611373[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AI</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   depth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   generator: MoveGenerator [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tree: DecisionTree [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ AI(board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPath(): Path</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(board: Board)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Attack524414451[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Attack</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, selected: Point): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, selectedX: int, selectedY: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- isAvailable(board: Board, offsetX: int, offsetY: int): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

AttackAnimation870345069[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AttackAnimation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   enemyShipAtlas: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mainAnimationIndex: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerShipAtlas: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sourceBoardCell: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   standingPlayerShipAnimationIndex: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weaponList: List&lt;Weapon&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ AttackAnimation(spaceshipPlayer: Spaceship, spaceshipEnemy: Spaceship)</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(boardPath: Path, screenPath: Path)</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAnimated(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BlackHole539379716[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)BlackHole</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   atlasCoords: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   movingStyle: MovingStyle [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ BlackHole()</TD></TR>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ clone(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamage(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMoves(): MovingStyle</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSide(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getStepMode(): StepMode</TD></TR>
<TR><TD ALIGN="LEFT" >+ info(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPassable(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShip(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDamage(damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStepMode(stepMode: StepMode)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Board539379716[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Board</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   availableForAttack: Set&lt;Point&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   availableForMove: Set&lt;Point&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardState: BoardState [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cells: Cell[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   currentPath: Path [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   emptySet: Set&lt;Point&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemy: AI [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemyAdvantagePoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   interacted: Cell [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   interactedCells: Set&lt;Point&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerAdvantagePoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selected: Cell [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sideTurns: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   turn: Side [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Board()</TD></TR>
<TR><TD ALIGN="LEFT" >+ calculateCurrentEnemyState(): BoardState</TD></TR>
<TR><TD ALIGN="LEFT" >+ calculateCurrentPlayerState(selectedX: int, selectedY: int): BoardState</TD></TR>
<TR><TD ALIGN="LEFT" >+ clone(): Board</TD></TR>
<TR><TD ALIGN="LEFT" >+ damageShip(shipX: int, shipY: int, damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- destroyShip(shipX: int, shipY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCellsForFire(): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCellsForFire(x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCellsForMove(): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCellsForMove(x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getContent(x: int, y: int): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCurrentPath(): Path</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCurrentState(selectedX: int, selectedY: int): BoardState</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamagePoints(target: Point): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamagePoints(x: int, y: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDefaultRotation(x: int, y: int): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEnemyAdvantagePoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(target: Point): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(x: int, y: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInteracted(): Cell</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(x: int, y: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(target: Point): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPlayerAdvantagePoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSelected(): Cell</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSelectedContent(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSelectedX(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSelectedY(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSide(x: int, y: int): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(x: int, y: int): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTurn(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ inBoard(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ initAI()</TD></TR>
<TR><TD ALIGN="LEFT" >+ isEnemyShip(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPassable(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShip(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShipSelected(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ makeArtificialTurn(path: Path)</TD></TR>
<TR><TD ALIGN="LEFT" >+ selectedCanFireTo(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ selectedCanMoveTo(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ set(board: Board)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setSelected(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- setSelectedPosition(toX: int, toY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateSide()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

BoardState539379716[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)BoardState</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   IDLE: BoardState [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SHIP_ATTACKING: BoardState [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SHIP_MOVING: BoardState [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): BoardState</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): BoardState[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];

Cell539379716[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Cell</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   content: Content [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Cell(content: Content)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Cell()</TD></TR>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getContent(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamageAmount(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMoves(): MovingStyle</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSide(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getStepMode(): StepMode</TD></TR>
<TR><TD ALIGN="LEFT" >+ info(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPassable(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShip(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setContent(content: Content)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDamage(damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStepMode(stepMode: StepMode)</TD></TR>
<TR><TD ALIGN="LEFT" >+ swapContents(cell: Cell)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Component1164637331[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Component</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   panelBottom: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   panelHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   panelLeft: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   panelWidth: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Config1439922759[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Config</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   ANIMATION_DURATION: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ANIMATION_SPEED: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   BACKGROUND_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   BOARD_SIZE: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   FONT_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   FRAMES_AMOUNT_SHIPS: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   GRID_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   HEALTH_BAR_HEIGHT_TO_PANEL_RATIO: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   HEALTH_BAR_WIDTH_TO_PANEL_RATIO: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   INFINITY_ANIMATION_DURATION: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   INFORMATION_PANEL_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   MOVEMENT_ANIMATION_PHASES: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   PANEL_OFFSET: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   PANEL_TO_SCREEN_RATIO: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ROTATION_VELOCITY: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SELECTED_CELL_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SHIP_SPRITE_SIZE: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SHOT_SPRITE_SIZE: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SPACESHIP_PATH: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   SPACESHIP_ROWS: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Config()</TD></TR>
<TR><TD ALIGN="LEFT" >- getElement(): Element</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInstance(): Config</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ContentAnimation1548811244[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ContentAnimation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   ANIMATION_DURATION: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   SPACESHIP_ATLAS: TextureRegion [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   animationType: AnimationType [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   elapsedTime: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   frames: Array&lt;TextureRegion&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sprite: Sprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   spriteAnimation: Animation&lt;TextureRegion&gt; [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ContentAnimation(animationType: AnimationType)</TD></TR>
<TR><TD ALIGN="LEFT" >+ ContentAnimation()</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(animationType: AnimationType, boardPath: Path, cellWidth: int, cellHeight: int, boardY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAnimated(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAnimatedObject(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(cellWidth: int, cellHeight: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- setRegion(animationType: AnimationType)</TD></TR>
<TR><TD ALIGN="LEFT" >- updateSpriteAnimation(data: AnimationData)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

CosmaGame107442825[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)CosmaGame</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   gameScreen: GameScreen [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ create()</TD></TR>
<TR><TD ALIGN="LEFT" >+ dispose()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GameScreen1317406460[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameScreen</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   background: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   current: Content [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   font: BitmapFont [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   infoPanel: InfoComponent [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   player: Player [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playingField: PlayingField [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   scoreComponent: ScoreComponent [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   touchedX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   touchedY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   worldHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   worldWidth: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ GameScreen()</TD></TR>
<TR><TD ALIGN="LEFT" >+ dispose()</TD></TR>
<TR><TD ALIGN="LEFT" >- drawTurn(side: Side)</TD></TR>
<TR><TD ALIGN="LEFT" >+ hide()</TD></TR>
<TR><TD ALIGN="LEFT" >+ pause()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(delta: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resume()</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

HorseMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HorseMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   offsets: Set&lt;Vector&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ HorseMovingStyle()</TD></TR>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

IdleMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)IdleMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

InfoComponent1306571141[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)InfoComponent</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   attackButton: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   font: BitmapFont [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthBar: ShapeRenderer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthBarHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthBarWidth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthToBarRatio: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   moveButton: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   panel: TextureRegion [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   panelBottom: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   panelHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   panelLeft: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   panelWidth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedCellDetails: SelectedCellDetails [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   spaceshipSprite: Sprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weaponButtons: List&lt;Button&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ InfoComponent()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateContent(content: Content)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

KingMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)KingMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
<TR><TD ALIGN="LEFT" >- inBoard(x: int, y: int): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MovementAnimation870345069[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MovementAnimation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   animationData: AnimationData [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mainAnimatedObject: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shipMovement: Movement [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shipRotation: Rotation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shipRotationToDefault: Rotation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   skeleton: Skeleton [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ MovementAnimation(content: Content)</TD></TR>
<TR><TD ALIGN="LEFT" >- getOrientation(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(boardPath: Path, screenPath: Path)</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAnimated(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAnimated(x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OfficerMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OfficerMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Path1459020871[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Path</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   from: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   to: Point [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Path(fromX: int, fromY: int, toX: int, toY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Path(from: Point, to: Point)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Path()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSource(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTarget(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLocation(from: Point)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Player107442825[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Player</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   input: Input [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Player()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getX(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getY(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ touchedBoard(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ touchedScreen(): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PlayingField1164637331[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PlayingField</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   BOARD_TO_SCREEN_HEIGHT_RATIO: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   CELL_AMOUNT_HEIGHT: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   CELL_AMOUNT_WIDTH: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   SCREEN_OFFSET: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   board: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardWidth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   boardY: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cellHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   cellWidth: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   contentAnimation: ContentAnimation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   grid: Texture [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedCell: Sprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   spaceships: TextureRegion [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   sprite: Sprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   worldHeight: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   worldWidth: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ PlayingField()</TD></TR>
<TR><TD ALIGN="LEFT" >- animationPlays(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ dispose()</TD></TR>
<TR><TD ALIGN="LEFT" >- drawAvailableCells()</TD></TR>
<TR><TD ALIGN="LEFT" >- drawBoardObjects()</TD></TR>
<TR><TD ALIGN="LEFT" >- drawGrid()</TD></TR>
<TR><TD ALIGN="LEFT" >- drawSelected(touchX: int, touchY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- enemyTurn(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- getBoardX(touchX: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >- getBoardY(touchY: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEnemyAdvantagePoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPlayerAdvantagePoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSelectedContent(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTurn(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >- inBoard(touchX: int, touchY: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ render(touchedX: int, touchedY: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Point1459020871[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Point</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   x: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   y: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Point()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Point(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(x: int, y: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ set(x: int, y: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

QueenMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)QueenMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ScoreComponent1164637331[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ScoreComponent</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   batch: SpriteBatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemyAdvantagePoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   font: BitmapFont [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playerAdvantagePoints: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ScoreComponent()</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ resize(width: int, height: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(playerAdvantagePoints: int, enemyAdvantagePoints: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SelectedCellDetails1306571141[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SelectedCellDetails</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   contentInformation: ContentInformation [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ SelectedCellDetails()</TD></TR>
<TR><TD ALIGN="LEFT" >+ init(panelLeft: int, panelBottom: int, panelWidth: int, panelHeight: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ render()</TD></TR>
<TR><TD ALIGN="LEFT" >+ setContentInformation(contentInformation: ContentInformation)</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(content: Content)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Side524414451[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)Side</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   ENEMY: Side [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   NONE: Side [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   PLAYER: Side [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   defaultRotation: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Side(id: int, defaultRotation: float)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDefaultRotation(): float</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ nextTurn(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): Side[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];

Skeleton1826806184[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)Skeleton</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   BATTLESHIP: Skeleton [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   CORVETTE: Skeleton [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   DESTROYER: Skeleton [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   DREADNOUGHT: Skeleton [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   atlas: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthPoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weaponCapacity: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Skeleton(id: int, weaponCapacity: int, healthPoints: int, atlas: Point)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAtlas(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getWeaponCapacity(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): Skeleton</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): Skeleton[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];

Space539379716[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Space</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   atlasCoords: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   movingStyle: MovingStyle [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Space()</TD></TR>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ clone(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamage(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMoves(): MovingStyle</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSide(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getStepMode(): StepMode</TD></TR>
<TR><TD ALIGN="LEFT" >+ info(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPassable(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShip(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDamage(damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStepMode(stepMode: StepMode)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Spaceship1826806184[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Spaceship</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   damagePoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthPoints: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   moves: MovingStyle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedWeapons: List&lt;Weapon&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   side: Side [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   skeleton: Skeleton [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stepMode: StepMode [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weaponAmount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weaponRange: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weapons: List&lt;Weapon&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Spaceship(side: Side)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addWeapon()</TD></TR>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ clone(): Content</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamage(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMaxHealthPoints(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMoves(): MovingStyle</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSide(): Side</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSkeleton(): Skeleton</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getStepMode(): StepMode</TD></TR>
<TR><TD ALIGN="LEFT" >+ getWeaponAmount(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getWeaponRange(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getWeapons(): List&lt;Weapon&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ info(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPassable(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isShip(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDamage(damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setMoves(moves: MovingStyle)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setSkeleton()</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStepMode(stepMode: StepMode)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

SpaceshipBuilder1826806184[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)SpaceshipBuilder</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   spaceship: Spaceship [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addMoves(): SpaceshipBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ addMoves(movingStyle: MovingStyle): SpaceshipBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ addSkeleton(): SpaceshipBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ addWeapon(amount: int): SpaceshipBuilder</TD></TR>
<TR><TD ALIGN="LEFT" >+ build(): Spaceship</TD></TR>
<TR><TD ALIGN="LEFT" >+ setSide(side: Side): SpaceshipBuilder</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

StepMode524414451[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)StepMode</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   ATTACK: StepMode [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   COMPLETED: StepMode [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   MOVE: StepMode [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- StepMode(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): StepMode</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): StepMode[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];

WeakRookMovingStyle1238916334[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)WeakRookMovingStyle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ canMoveTo(fromX: int, fromY: int, x: int, y: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAvailableCells(board: Board, x: int, y: int): Set&lt;Point&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Weapon1826806184[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)Weapon</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   ION_CANNON: Weapon [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   LASER: Weapon [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   MACHINE_GUN: Weapon [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   TORPEDO_LAUNCHER: Weapon [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   damage: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   explosion: Point [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   radius: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   shot: Point [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Weapon(id: int, radius: int, damage: int, shot: Point, explosion: Point)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getByID(id: int): Weapon</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDamage(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getExplosionSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRadius(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getShotSprite(): Point</TD></TR>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): Weapon</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): Weapon[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];
} 
} 

'edges    
BlackHole539379716 -> HorseMovingStyle1238916334[arrowhead=none];
BlackHole539379716 -> IdleMovingStyle1238916334[arrowhead=none];
BlackHole539379716 -> KingMovingStyle1238916334[arrowhead=none];
BlackHole539379716 -> OfficerMovingStyle1238916334[arrowhead=none];
BlackHole539379716 -> Point1459020871[label="atlasCoords
[0..1]"];
BlackHole539379716 -> QueenMovingStyle1238916334[arrowhead=none];
BlackHole539379716 -> WeakRookMovingStyle1238916334[arrowhead=none];
Board539379716 -> AI1078611373[label="enemy
[0..1]"];
Board539379716 -> BoardState539379716[label="boardState
[0..1]"];
Board539379716 -> Cell539379716[label="cells
[0..*]"];
Board539379716 -> Cell539379716[label="interacted
[0..1]"];
Board539379716 -> Cell539379716[label="selected
[0..1]"];
Board539379716 -> Path1459020871[label="currentPath
[0..1]"];
Board539379716 -> Point1459020871[label="availableForAttack
[0..*]"];
Board539379716 -> Point1459020871[label="availableForMove
[0..*]"];
Board539379716 -> Point1459020871[label="emptySet
[0..*]"];
Board539379716 -> Point1459020871[label="interactedCells
[0..*]"];
Board539379716 -> Side524414451[label="turn
[0..1]"];
Component1164637331 -> InfoComponent1306571141[arrowhead=none, arrowtail=empty, dir=both];
Component1164637331 -> ScoreComponent1164637331[arrowhead=none, arrowtail=empty, dir=both];
CosmaGame107442825 -> GameScreen1317406460[label="gameScreen
[0..1]"];
GameScreen1317406460 -> BlackHole539379716[arrowhead=none];
GameScreen1317406460 -> Board539379716[arrowhead=none];
GameScreen1317406460 -> InfoComponent1306571141[label="infoPanel
[0..1]"];
GameScreen1317406460 -> Player107442825[label="player
[0..1]"];
GameScreen1317406460 -> PlayingField1164637331[label="playingField
[0..1]"];
GameScreen1317406460 -> ScoreComponent1164637331[label="scoreComponent
[0..1]"];
GameScreen1317406460 -> Space539379716[arrowhead=none];
GameScreen1317406460 -> Spaceship1826806184[arrowhead=none];
InfoComponent1306571141 -> SelectedCellDetails1306571141[label="selectedCellDetails
[0..1]"];
PlayingField1164637331 -> AttackAnimation870345069[label="render() -> AttackAnimation()"];
PlayingField1164637331 -> Board539379716[label="board
[0..1]"];
PlayingField1164637331 -> Cell539379716[label="render() -> getContent()"];
PlayingField1164637331 -> ContentAnimation1548811244[label="contentAnimation
[0..1]"];
PlayingField1164637331 -> MovementAnimation870345069[label="render() -> MovementAnimation()"];
ScoreComponent1164637331 -> Config1439922759[label="ScoreComponent() -> getInstance()"];
Space539379716 -> Point1459020871[label="atlasCoords
[0..1]"];
Spaceship1826806184 -> Side524414451[label="side
[0..1]"];
Spaceship1826806184 -> Skeleton1826806184[label="skeleton
[0..1]"];
Spaceship1826806184 -> StepMode524414451[label="stepMode
[0..1]"];
Spaceship1826806184 -> Weapon1826806184[label="selectedWeapons
[0..*]"];
Spaceship1826806184 -> Weapon1826806184[label="weapons
[0..*]"];
    
}
@enduml